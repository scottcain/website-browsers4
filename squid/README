Performance enhancements at WormBase
----------------------------------------

The growth of the C. elegans community and the rise of comparative
genomics has fueled an increased demand for the extensive data housed
in WormBase.  In addition, WormBase pages have grown increasingly
complicated.  As a result, the performance of WormBase -- hosted on a
single server -- can suffer from slow response times during periods of
heavy load.

WormBase is now in the process of implementing a multi-tiered hardware
and software solution to provide additional hosting capacity.  These
improvements include:

  - a pool of servers running identical copies of the database and website

  - HTTP acceleration through the use of disk caches on each server

  - a primary load balancing server that distributes requests to the server pool

The remainder of this document describes the implementation of this
load balancing strategy, including hardware and software configuration
and administration.

Phases of transition
---------------------

Phase 1:
Place www.wormbase.org behind a squid prxying and caching server

Phase 2:
Add the vab machine as a cache_peer to draw additional computer power

Phase 3:
Add the unc machine, possibly as a dedicated database server or cache_peer

Phase 4:
Add automatic geographical redirection to the closest mirror











=head1 1. Building and installing squid

=head2 1A. Pretuning the kernel

Your system must be able to handle a large number of open file
handles.  1024 may be sufficient but more may be required for very
active caches.  Check the number of available file handles on your
system by:

  % ulimit -n

=head2 1B. ./configure options

Squid supports a large number of options during configuration.  The
squid servers at WormBase are configured with the following options:

=over 4

=item --prefix=/usr/local/squid

Defaults to /usr/local/squid - this is provided just for completeness.

=item --enable-removal-policies=heap,lru

This directive enables multiple options for handling removal of
entries from the cache.  We will typically use LRU but providing this
directive during configuration opens up other options which can be
enabled in squid.conf.

=item --enable-icmp

Enables round-trip measurements of cachce requests.

=item --enable-delay-pools  [performance hit?]

This directive enables delay pools which can be used to throttle
spiders and programmatic users.

=item --enable-useragent-log [performance hit?]

Enable logging of HTTP user agent.

=item --enable-referer-log [performance hit?]

Enable logging of cache referer.

=item --disable-wccp

Turn off the optional WCCP code.  Is this necessary / desireable?

=item --enable-snmp

Enable SNMP code that facilitates monitoring of the server.

=item --enable-cachemgr-hostname=[hostname]

Enable the cache manager CGI with a specific hostname.

=back

The following options may be useful in the future but are not
currently used.

=over 4

=item --localstatedir=DIR

This flag controls the destination of the squid var/ directory which
holds the squid cache and logs. Although not currently used, it may be
useful to place the var/ directory on a seperate disk from that
powering the website databases.

=item --sysconfdir=DIR

This directive specifies where to place the etc/ directory.  This may
be useful if, for example, we want to store the config files in the
the WormBase CVS repository.

=item --enable-carp

This enables forwarding of cache misses to other caches. Not sure of
its usage at this point.

=item --enable-htcp

HTCP is an alternative to ICP inter-cache communications.

=item --enable-cache-digests

Cache digests are another alternative to ICP with a slightly different
structure.

=back

The current configure command looks like this:

  % ./configure --prefix=/usr/local/squid \
                --enable-removal-policies=heap,lru \
                --enable-icmp \
                --enable-delay-pools \
                --enable-useragent-log \
                --enable-referer-log \
                --disable-wccp \
                --enable-snmp \
                --enable-cachemgr-hostname=www.wormbase.org \
 	        --disable-internal-dns

To run config at a later date with the same parameters:

  % ./config.status --recheck

And finally, do a:

  % make
  % sudo make install

=head1 2. Configuring the system to run a squid server

=head2 2A. Creating users and groups

Since squid will need to listen to ports less than 1000, it needs to
be run with root privileges.  Squid, however, should not be run as
root.  Instead, create a squid user and group.

 $ sudo /usr/sbin/useradd squid -d /usr/local/squid

In the squid.conf file, you will set parameters that tell squid to run
as the quid user/group.

=head2 2B. Fix directory permissions

Directory permissions should be secured as follows.
  
  Path                  owner:group   octal
  /usr/local/squid      root:root     775
  /usr/local/squid/bin  root:root     775
  /usr/local/squid/etc  root:squid    2775
  /usr/local/squid/var	

=head1 3. The squid.conf file: configuring Squid

Squid accepts an enormous number of configuration options many of
which influence the behavior of other options.  These are housed in
/usr/local/squid/etc/squid.conf.  Those that are most important for
our configuration are described here.  See squid.conf for a full
description of all options in use at WormBase.

=over 4

=item http_port 80

The squid server will listen to port 80 acting as a surrogate host for
httpd.

=item icp_port 3130

The ICP port is used to communicate with neighboring caches.  We use
the default value of 3130.

=item Cache peers
 
To take advantage of the multiple servers in our WormBase pool, we
need to specify where they are and how to interact with them.  Since
each server in the pool will also be a http accelerating squid server,
we can first request a page from the squid cache and if not found,
from the local server.

=item   cache_effective_user squid
	cache_effective_group squid

Squid needs to run as the squid user and group. To control this, set
the two following options:

=head2 3C. HTTP acceleration (ie page caching)

The following options specify which host and port to forward requests.
It is sufficient for each squid server to point to the localhost in
our configuration.

  httpd_accel_host 127.0.0.1
#  httpd_accel_port 81

httpd must be set to bind to a different IP address (discussed below)

=head2 Logging

Squid creates a rather large number of logs. The cache.store log is
particularly useless as it just contains a log of all object names
cached.  To turn it off, specify

  cache_store_log  none

emulate_httpd_log on

Create httpd style logs.  The squid logs will now be our primary
source of logging information as the primary httpd logs will only
contain squid accessions.

=head2 3E. Access Control Lists

The no_cache parameters need to be changed so that requests to cgi-bin
and ? are cached.  Comment out the folliwng two lines in the default
configuration

#acl QUERY urlpath_regex cgi-bin \?
#no_cache deny QUERY

=head2 3E. Preventing caching of GBrowse-generated pages

We will not specifically cache requests to GBrowse since it can
produce a possibly unlimited number of pages.  To turn of caching of
GBrowse, add the following lines to the configuration file.

   hierarchy_stoplist gbrowse

This line prevents squid from seeking the requested page from
neighboring caches.

   acl GBROWSE urlpath_regex gbrowse
   no_cache deny GBROWSE

These lines prevent squid from caching GBrowse requests.

=head2 3F. Caching dynamic pages (ie from /db)

All dynamic pages, with the exception of those drawn from GBrowse,
will be cached.  Add the following refresh pattern to force caching of
dynamic pages regardless of the status of their headers

refresh_pattern cgi-bin 600 0% 4320 ignore-reload override-expire override-lastmod

=head2 3G. Testing your configuration file

After making changes to your configuration file, it is a good idea to
check its syntax.

	squid -k parse

=head1 4. httpd Configuration

Since squid will be acting as a surrogate for www.wormbase.org on port
80, we need to change which port httpd listens to.  Unfortunately,
setting httpd to listen to a different port causes other problems.
For example, the squid server may be exposed or bypassed if the httpd
generates a redirect to the local port.

To solve this problem, we set httpd to bind to the localhost address:

BindAddress 127.0.0.1
ServerName www.wormbase.org

Make these changes in the primary httpd.conf.

=head1 5. Starting and stopping squid

=head2 5A. Running squid from the command line

To test a squid installation, invoke it like this:

  sudo /usr/local/squid/sbin/squid -N -d 1 -D -z -f /path/to/config/file

We want to be able to see that Squid's actually doing something
useful, so we increase the debug level (using -d 1) and tell it not to
dissapear into the background (using -N.) If your machine is not
connected to the Internet (you are doing a trial squid-install on your
home machine, for example) you should use the -D flag too, since Squid
tries to do DNS lookups for a few common domains, and dies with an
error if it is not able to resolve them.  The -z flag is only
necessary the first time squid is run or whenever a new cache
directory is added.  It serves to initialize the cache directory.

Now try connecting to the squid server:

   squidclient http://www.wormbase.org/

=head2 5B. Launching squid at system startup

We want squid to launch as a daemon in the background whenever the
system boots. A suitable init.d script exists at
/usr/local/website-admin/suiqd/util/squid.initd.  Copy this file to
/etc/init.d/squid. You can thus launch squid by

 sudo /etc/init.d/squid start

=head2 5C. Stopping squid

You can stop squid by issuing 

  squid -k shutdown

If the pid file is missing, find the pid for the primary squid provess
and kill it by

  kill -TERM [PID]

Check the cache.log file to confirm that squid has shut down.







=head1 Appendix A: Squid tips and tricks

=over 4

=item Testing the squid configuration file

After making changes to your configuration file, it is a good idea to
check its syntax.

	squid -k parse

=item squid_start

When squid launches, it first looks for the squid_start script
adjacent to the squid binary.  This is a useful place for storing
additional administration tasks.

=item Squid restarts with write-errors

If log files grow to large and squid can no longer write to them, it
will restart.

=back













If you want to use the WWW interface to the Cache Manager, copy
the cachemgr.cgi program into your httpd server's cgi-bin
directory.




TEMPLATE
Round robin DNS distributed page requests evenly to one of three Squid cache servers.

Squid cache servers used response time measurements to distribute page requests between seven web servers. In addition, the Squid servers cached pages and delivered about 75% of all pages without ever asking a web server for help.

The PHP scripts which run the web servers distribute load to one of several database servers depending on the type of request, with updates going to a master database server and some database queries going to one or more slave database servers.


Request stages:
----------------	

1. Primary request directed to www.wormbase.org handled
	by squid server

2. Page served from squid cache (if found).

      OR

3. Page requested from the least burdened server in the squid pool


As of June 2005, the WormBase pool of servers consists of:
	
   www.wormbase.org - the principle WormBase machine and squid server
   unc.wormbase.org
   vab.wormbase.org


AceBrowser configuration
-------------------------
The header of AceBrowser needs to be set so that cgi generated pages
expire far in the future or else the page will not be cached.

This is in the AceHeader method.
Add -expires=>'+3M' to the header....



See http://www.faqs.org/docs/securing/chap28sec231.html for a good
starting point


