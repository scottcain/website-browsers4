
no_cache deny GBROWSE
no_cache deny GBROWSE2
no_cache deny news
no_cache deny feedback
#no_cache deny sitemap
no_cache deny wiki
#no_cache deny nbrowse




#  TAG: http_access
#	Allowing or Denying access based on defined access lists
#
#	Access to the HTTP port:
#	http_access allow|deny [!]aclname ...
#
#	NOTE on default values:
#
#	If there are no "access" lines present, the default is to deny
#	the request.
#
#	If none of the "access" lines cause a match, the default is the
#	opposite of the last line in the list.  If the last line was
#	deny, the default is allow.  Conversely, if the last line
#	is allow, the default will be deny.  For these reasons, it is a
#	good idea to have an "deny all" or "allow all" entry at the end
#	of your access lists to avoid potential confusion.
#
# Default:
# http_access deny all

# Deny CONNECT to other than SSL ports
#####http_access deny CONNECT !SSL_ports
#
# We strongly recommend the following be uncommented to protect innocent
# web applications running on the proxy server who think the only
# one who can access services on "localhost" is a local user
#http_access deny to_localhost
#
# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS

# Allow access to the localhost
http_access allow proxy_host
http_access allow localhost
http_access allow CacheManager localhost
http_access allow CacheManager from_proxy_host
#
http_access allow CacheManager to_localhost
http_access allow CacheManager proxy_host
http_access deny CacheManager

# Allow cache purging from the localhost only
http_access allow PURGE localhost
http_access deny PURGE  

# Specifically allow access to our backend servers
#http_access allow vab
#http_access allow unc

#http_access deny !server_pool

# And finally deny all other access except for requests
# directed towards this proxy
http_access deny !proxy_host
http_access deny !proxy_port
http_access allow all




# POSSIBLE CONFIG ISSUE - AUTOMATICALLY DIRECTING WORMMART QUERIES
#  TAG: always_direct
#	Usage: always_direct allow|deny [!]aclname ...
#
#	Here you can use ACL elements to specify requests which should
#	ALWAYS be forwarded by Squid to the origin servers without using
#	any peers.  For example, to always directly forward requests for
#	local servers ignoring any parents or siblings you may have use
#	something like:
#
#		acl local-servers dstdomain my.domain.net
#		always_direct allow local-servers
#
#	To always forward FTP requests directly, use
#
#		acl FTP proto FTP
#		always_direct allow FTP
#
#	NOTE: There is a similar, but opposite option named
#	'never_direct'.  You need to be aware that "always_direct deny
#	foo" is NOT the same thing as "never_direct allow foo".  You
#	may need to use a deny rule to exclude a more-specific case of
#	some other rule.  Example:
#
#		acl local-external dstdomain external.foo.net
#		acl local-servers dstdomain  .foo.net
#		always_direct deny local-external
#		always_direct allow local-servers
#
#	NOTE: If your goal is to make the client forward the request
#	directly to the origin server bypassing Squid then this needs
#	to be done in the client configuration. Squid configuration
#	can only tell Squid how Squid should fetch the object.
#
#	NOTE: This directive is not related to caching. The replies
#	is cached as usual even if you use always_direct. To not cache
#	the replies see no_cache.
#
#	This option replaces some v1.1 options such as local_domain
#	and local_ip.
#
#Default:
# none
#acl WormMart url_regex biomart
#acl Wormmart_dest dst biomart.wormbase.org
#always_direct
# LOAD BALANCING - THIS MAY BE REQUIRED FOR LOAD BALANCING
#always_direct allow Localhost





