#!/usr/bin/perl
use strict;
$|++;  # VERY IMPORTANT! Do not buffer output

use constant DEBUG      => 0;
use constant DEBUG_FULL => 0;

open ERR,">>/usr/local/squid/var/logs/redirector.debug" if DEBUG || DEBUG_FULL;

# Eeks! Something has gone wrong. Send all traffic to (basically) one machine)
#my @servers = qw/aceserver blast unc gene local/;
#my %servers = map { $_ => aceserver.cshl.org } @servers;
#$servers{biomart}  = 'biomart.wormbase.org';

my %servers = (
	       # 2010.05.12
	       # Aceserver is now retired.
	       # The datamining server has no DNS entry yet.
	       # Will become mining.wormbase.org
	       # aceserver   => 'aceserver.cshl.org:8080',
	       # Blast retired 2010.05.17
	       # blast     => 'blast.wormbase.org:8080',
	       # aka wb-mining.oicr.on.ca 
	       "oicr-mining"  => '206.108.125.178',

	       # Migrating to 
	       # 206.108.125.189:8080 (and/or update DNS entry)
	       biomart   => 'biomart.wormbase.org',

	       nbrowse   => 'gene.wormbase.org:9002',
	       nbrowsejsp => 'gene.wormbase.org:9022',
	       
	       # Where we are serving static content from (not currently in use)
	       #static    => '',

	       # 2010.05.18
	       # Retiring gene, brie3, and brie6
	       # gene      => 'gene.wormbase.org:8080',
	       brie3     => 'brie3.cshl.org:8080',       
	       # unc: aka brie6 - this basically just serves static content
	       # unc       => 'unc.wormbase.org:8080',
	       'oicr-web1' => '206.108.125.175',

	       # 2010.05.16
               # Retiring freeze1, freeze2
	       # freeze1   => 'freeze1.wormbase.org:8080',
	       # freeze2   => 'freeze2.wormbase.org:8080',
	       be1       => 'be1.wormbase.org:8080',
	       # Now handled by oicr-web2 (aka wb-acedb2.oicr.on.ca)
	       'oicr-web2' => '206.108.125.177',


	       synteny   => 'mckay.cshl.edu',

	       # GBrowse running at OICR. Can run on
	       # non-standard ports since these services
	       # will not be accessed directly.
	       "oicr-gbrowse2" => '206.108.125.173',
	       "oicr-gbrowse1" => '206.108.125.173:8080',

	       # 2010.05.05
	       # Blog, wiki, forums are all at OICR.
	       # Here, we send all requests like "wormbase.org/blog"
	       # to oicr, which then issues a 301 redirect to the subdomain.
	       # Monitor the logs/redirect on this server to gauge
	       # how heavily this is used.
	       # This can probably be retired in the near future.
	       # (As well as all of the configuration for these
	       #  services contained below)
	       "oicr-community-blog"   => '206.108.125.176',
	       "oicr-community-forums" => '206.108.125.176:8081',
	       "oicr-community-wiki"   => '206.108.125.176:8080',
	       );


my $server_name = `hostname`;
chomp $server_name;

my ($uri,$client,$ident,$method);
while (<>) {
    ($uri,$client,$ident,$method) = split();
    
    my $request = $_;
    
    if (DEBUG_FULL) {
	print ERR "REQUEST: $request\n";
	print ERR "URI    : $uri\n";
	print ERR "CLIENT : $client\n";
    }
    
    # next unless ($uri =~ m|^http://roundrobin.wormbase.org/(\S*)|);
    
    # Parse out params from the URI
    my ($params) = $uri =~ m{^http://.*\.org/(\S*)};
    
    # Set up the default destiation
    my $destination = $servers{brie3};
    
    ##########################################################
    #  OICR
    #  GBrowse2
    if ( $uri =~ m{gb2} 
	 ||
	 $uri =~ m{gbrowse2}
	 ||
	 $uri =~ m{gb2-support}
	 ||
	 $uri =~ m{gbrowse_img}
	 ) {
#	$params =~ s|db/gb2|db/seq|g;
	
	$destination = $servers{"oicr-gbrowse2"};
	$uri = "http://$destination/$params";
	next;
    }
    
    
    
    ##########################################################
    #  OICR
    #  The computationally intensive gene page
    #  Check for it first since this is the most prominent request
    if ($uri =~ m{gene/gene}
	|| $uri =~ m{/db/gene/operon}
	|| $uri =~ m{searches/basic}
	) {
	
	$destination = $servers{be1};
#	$destination = $servers{"oicr-web2"};
	print ERR "Routing Gene Page query ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";
	next;
    }
    
    
    ##########################################################
    #  CSHL: Mckays server
    #  The synteny browser
    if ($uri =~ m{cgi-bin/gbrowse_syn}
	|| $uri =~ m{gbrowse/tmp/.*synteny}
	|| $uri =~ m{gbrowse/tmp/compara}
	) {       
	$destination = $servers{synteny};
	$uri = "http://$destination/$params";
	next;
    }
    

    ##########################################################
    #  CSHL & OICR
    #  Dynamic images
    # Update: I believe that only the protein page generates a dynamic image.
    # I will assume this and send the request to the server responsible
    # for that page (currently oicr-web2)
    # dynamic_images:
    #      protein page: oicr-web2
    #      interaction page pie chart:    brie3
    #      gene/gmap : brie3

    # 2010.05.08
    # GBrowse1 and GBrowse2 now being served from OICR.    
#    ##########################################################
#    #
#    #  Dynamic images, specific to generating back-end server
#    #  Server keywords are embedded in the URL and less than 
#    #  6 letters in length forum images are handled elsewhere.
#    #  Currently this INCLUDES GBrowse images.
#
#    # Is any of this necessary if running GBrowse 1.x at OICR?
#    if (($uri =~ m{img/(.*?)/} && $1 < 10 && $uri !~ m{gbrowse_img} && $uri !~ m{forums}
#	 && $uri !~ m{mckay})
#	||
#	($uri =~ m{images/gbrowse/(.*?)/} && $1 < 10 && $uri !~ m{gbrowse_img} && $uri !~ m{forums}
#	 && $uri !~ m{mckay})
#	|| 
#    if ($uri =~ m{dynamic_images/(.*?)/} && $1 < 10) {
    if ($uri =~ m{dynamic_images}) {
#	
#	# Uncomment to INCLUDE gbrowse generated images
#	||
#	($uri =~ m{tmp/gbrowse/(.*?)/} && $1 < 10)
#	) {
#	#
	# mckay is tempo hack for images for the blast_blat page. Ugh.
	my $server = $1;
#	$destination = $servers{$server};
	$destination = $servers{"oicr-web2"};
	if ($uri =~ /pie_chart/
	    ||
	    $uri =~ m{dynamic_images/brie3}) {
	    $destination = $servers{brie3};
	}
	
	print ERR "Routing dynamic images ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";
	next;
    }
    
    # RELOCATED GBrowse 1.x to OICR on 2010.05.08.
    # I *believe* this is now deprecated.
    # All paths instead are self-contained in /gbrowse and set up in the gbrowse config
    
#    ##########################################################
#    #
#    #  The Genome Browser and components,
#    #  another often used page
#    #  For running GBrowse1.x at CSHL....
#    if (  $uri =~ m{seq/gbrowse} 
#	  || $uri =~ m{gbgff}
##	  || $uri =~ m{tmp/gbrowse}    # temporary images; should possibly be included in dynamic images above
#	  || $uri =~ m{gbrowse/tmp}    # temporary images (old structure)
#	  || $uri =~ m{gbrowse_img}   
#	  || $params =~ m{^gbrowse}     # Gbrowse js must be served from same node?
#	  || $uri =~ m{aligner}  
#	  ) {
#	
#	$destination = $servers{brie3};
#	
#	print ERR "Routing Genome Browser ($uri) to $destination\n" if DEBUG;
#	$uri = "http://$destination/$params";
#	next;
#    }

    ##########################################################
    #  CSHL
    #  The EST aligner

    # GBrowse 1.x relocation: Still need to send the aligner to brie3
    # Make sure the aligner still goes to brie3
    if ($uri =~ m{aligner}) {
	$destination = $servers{brie3};
	
	print ERR "Routing Genome Browser ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";
	next;
    }
    
    
    ##########################################################
    #  OICR
    #  Send GBrowse1 requests to OICR.
    if (  $uri =~ m{seq/gbrowse} 
	  || $uri =~ m{gbgff}
	  || $uri =~ m{gbrowse/tmp}    # temporary images (old structure)
	  || $uri =~ m{gbrowse_img}   
	  || $params =~ m{^gbrowse}     # Gbrowse js must be served from same node?	  
	  || $uri =~ m{gb1-support}
	  ) {
	
	$destination = $servers{"oicr-gbrowse1"};
	
	print ERR "Routing Genome Browser ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";
	next;
    }
    
    
    ##########################################################
    #  CSHL
    #  The Home Page
    if ( $params eq ''
	 || $uri eq 'http://www.wormbase.org/'
	 || $uri eq 'http://wormbase.org/'
	 ) {
	$destination = $servers{brie3};
	
	print ERR "Routing MT ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";
	next;
    }
    
        
    ##########################################################
    #  OICR
    #  Manually redistribute some CGIs (Tier II)
    if (  $uri =~ m{seq/sequence}
	  || $uri =~ m{gene/variation}
	  || $uri =~ m{ontology}
	  || $uri =~ m{db/misc/session}  # session management
	  || $uri =~ m{api/citeulike}
	  || $uri =~ m{gene/expression}
	  ) {
	
	$destination = $servers{"oicr-web1"};
#	$destination = $servers{gene};
	print ERR "Routing CGIs Tier II ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";	    
	next;	
    }
    
    
    
    
    ##########################################################
    #  OICR
    #  Manually redistribute some CGIs (Tier III)
    if (   $uri =~ m{/db/gene/antibody}
	   || $uri =~ m{/db/gene/gene_class}
	   || $uri =~ m{/db/gene/motif}
	   || $uri =~ m{/db/gene/regulation}
	   || $uri =~ m{/db/gene/strain}
	   || $uri =~ m{/db/seq/protein}
	   
#	   || $uri =~ m{db/misc/}
	   ) {

	$destination = $servers{"oicr-web2"};
	print ERR "Routing CGIs Tier III ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";	    
	next;	
    }
    
     
    # 2010.05.16
    # Freeze2 now retired
    ##########################################################
    #
    #  Manually distribute some CGIs (Tier V)
    #  Everything that remains in /db/misc
#    if ( $uri =~ m{db/misc}
#	 ||
#	 $uri =~ m{db/gene/expression}
#	 ) {
#	
#	$destination = $servers{freeze2};
#	
#	# Logic hack. 2010.04.13.
#        # $destination = $servers{gene} if $uri =~ /inline_feed/;
#	
#	print ERR "Routing CGIs Tier V ($uri) to $destination\n" if DEBUG;
#	$uri = "http://$destination/$params";	    
#	next;	
#    }
       

    # 2010.05.12: Aceserver nearly retired.
    ##########################################################
    #  OICR
    #  mining.wormbase.org: miscellaneous programmatic queries
    #
    # Is searches/blat deprecated?
    if (   $uri    =~ m{wb_query} 
	   || $uri =~ m{aql_query}
	   || $uri =~ m{class_query} 
	   || $uri =~ m{searches/batch_genes}
	   || $uri =~ m{searches/advanced/dumper}
	   || ($uri =~ m{cisortho})
	   || $uri =~ m{searches/epcr}
	   || $uri =~ m{searches/strains}
	   || $uri =~ m{blast_blat}
	   || $uri =~ m{searches/blat}
	   ) {
	$destination = $servers{"oicr-mining"};
	
	print ERR "Routing query request ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";
	next;
    }
    
    # 2010.05.05
    # Blog, wiki, forums are all at OICR.
    # Here, we send all requests like "wormbase.org/blog"
    # to oicr, which then issues a 301 redirect to the subdomain.
    # Monitor the logs/redirect on this server to gauge
    # how heavily this is used.
    # This can probably be retired in the near future.
    # (As well as all of the configuration for these
    #  services contained below)

    ##########################################################
    #
    #  The Blog
    if ($params =~ m{blog}) {
	$destination = $servers{"oicr-community-blog"};

	# Whoops!  This might be a request for the inline_feed script
	# which contains the blog rss feed URI as a parameter. Except
	# that the inline_feed script doesn't run from there.
	if ($uri =~ /inline_feed/) {
	    $destination = $servers{brie3};
	    $uri = "http://$destination/$params";	    
	    next;
	}
	
	# Catch problems with some URLs. Need to append the back slash.
	$params = 'blog/' if $params eq 'blog';
	
    	print ERR "Routing blog ($uri) to $destination\n" if DEBUG;
        $uri = "http://$destination/$params";	    
	next;
    }
    
    ##########################################################
    #
    #  The Forums
    #  The fora are now a subdomain: forums.wormbase.org:8081
    #  Port 8081 on the community server will handle 301 redirect.
    #  Redirect added: 2010.05.10
    if ($uri =~ m{forums}) {
	$destination = $servers{"oicr-community-forums"};
	
	# NOT NECESSARY (as long as /misc/ URI handler comes first)
#	# Whoops!  This might be a request for the inline_feed script
#	# which contains the blog rss feed as a parameter. Doh!
	if ($uri =~ /inline_feed/) {
	    $destination = $servers{brie3};
	    $uri = "http://$destination/$params";	    
	    next;
	}
	
	# Catch problems with forum URLs too. Need to append the back slash.
	$params = 'forums/' if $params eq 'forums';
	
    	print ERR "Routing forums ($uri) to $destination/$params\n" if DEBUG;
        $uri = "http://$destination/$params";	    
	next;
    }
    
    
    ##########################################################
    #
    #  The Wiki
    #  The wiki is now a subdomain: wiki.wormbase.org
    #  Port 8080 on the community server will handle 301 redirect.
    #  Redirect added: 2010.05.10
    if ($uri =~ m{wiki}) {
	$destination = $servers{"oicr-community-wiki"};
	
	# Hack to get around MediaWiki's weird redirect
	$params = 'wiki/index.php/Main_Page' if $params eq 'wiki';       
	
	# Hack. Require a trailing slash.
	$params = 'wiki/' if $params eq 'wiki';
	
	print ERR "Routing wiki/forum ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";
	next;
    }


     
    
    ##########################################################
    #
    #  biomart
    if (   $uri  =~ m{biomart}i
	   || $uri  =~ m{martview}
	   || $uri  =~ m{gfx}
	   || ($uri =~ m{Multi}i && $uri !~ m{tree})) {
	
	# Substitute old params for new
	$params =~ s|/Multi/martview|/biomart/martview|;
	
	$destination = $servers{biomart};
	
	print ERR "Routing biomart ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";
	next;
    }

    ##########################################################
    #
    #  The cachemgr CGI resides on the localhost
    if ($uri =~ m{.*squid/cachemgr\.cgi}) {
	print "\n";
	return;
    }


    ##########################################################
    #  OICR: Static content.
    #  For now, just randomize between web1/web2/mining
    #  Various static content; must come BELOW forum/wiki
    #  Serve basically anything outside of /db from a single box.
    #  This is mostly static content (gbrowse static handled above)
    if (  $params !~ m{^db}) {
	
	my @array = ($servers{"oicr-web1"},$servers{"oicr-web2"},$servers{"oicr-mining"});
	my $range = scalar @array;
	my $index = int(rand($range));
	
	$destination = $array[$index];
	
	print ERR "Routing static content ($uri) to $destination\n" if DEBUG;
	$uri = "http://$destination/$params";
	next;
    }

        

    # This configuration hasn;'t been handled yet
    if (0) {
	if (1) {
	    
	    # This needs to be migrated
	    # Standard URLs - NOT HANDLED
	} elsif ($uri =~ /genome/) {
	    $destination = $servers{unc};
	    
	    
	    # This is probably unnecessary
	    # The autocomplete database
	    # This should be available on all backend machines
	} elsif ($uri =~ /autocomplete/) {
	    $destination = $servers{be1};
	    
	    ####### MISC
	    
	    # THis should probably be migrated
	} elsif ($uri =~ /nbrowse/i) {
	    $destination = 
		($uri =~ /nbrowse_t/)
		? $servers{nbrowsejsp}
	    : $servers{nbrowse};
	    # Catch problems with select URLs. Need to append the back slash.
	    $params = 'db/nbrowse/temp_data/' if $params eq 'db/nbrowse/temp_data';
	    
	} else {}	
    }
    
    print ERR "Routing fall-through: $uri to default server $destination\n" if DEBUG;    
    $uri = "http://$destination/$params";
    
} continue {
    print "$uri\n";
}

