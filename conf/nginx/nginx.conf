
#user  nobody;
worker_processes  1;
#worker_processes  2;
daemon off;


# Error log
error_log  /usr/local/wormbase/logs/nginx-error.log warn;
#error_log  /usr/local/wormbase/logs/nginx-error.log notice;
#error_log  /usr/local/wormbase/logs/nginx-error.log info;

# pid file (defaults to logs)
pid        /usr/local/wormbase/nginx/logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    server_names_hash_bucket_size 64;

    # Optional: set up the access log and define a format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /usr/local/wormbase/logs/nginx-access.log main;
 
    # Load-balancing against a pool of fastcgi TCP sockets.
    # Simple load-balancing.
    # Define as many servers as we like (and weight them)
    upstream wormbase  {
       # TCP socket
       # server 127.0.0.1:20000   # or unix socket or hostname      

       # Unix socket on localhost
       server unix:/tmp/wormbase.sock;

       # Or server name with weights
       # server george.constantshift.com weight=3  # eg; weighting
    }

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


  server {
      server_name beta.wormbase.org;

      # Where the reverse proxy will listen
      listen      20000;

      #charset koi8-r;
      #access_log  logs/host.access.log  main;

      # log for cache hits.
      log_format cache '***$time_local '
		       '$upstream_cache_status '
		       'Cache-Control: $upstream_http_cache_control '
                       'Expires: $upstream_http_expires '
                       '"$request" ($status) '
		       '"$http_user_agent" ';
       access_log /usr/local/wormbase/logs/nginx-cache.log cache;

       # Enable gzip compression
       gzip             on;
       gzip_min_length  1000;
       gzip_proxied     any;
       gzip_types       text/xml text/plain application/xml;

       include       mime.types;
       default_type  application/octet-stream;

       #error_page  404              /404.html;
       # redirect server error pages to the static page /50x.html
       #
#       error_page   500 502 503 504  /50x.html;
#       location = /50x.html {
#           root   html;
#       }


       # Show status information on /status
       location = /status {
           stub_status on;
           allow 127.0.0.1;
           deny all;
       }

       # TO HANDLE!
       # do not cache when users are logged in..
       #        proxy_cache_bypass $cookie___ac;



# fastcgi
       location / {
          include fastcgi_params; # We'll discuss this later
          # Unix socket
          # fastcgi_pass unix:/tmp/myapp.fcgi;
   
          # TCP socket
          # fastcgi_pass  127.0.0.1:10004;
	  
          # Or load-balanced pool (currently of one)
          fastcgi_pass wormbase;

#          proxy_redirect   off;
#          proxy_set_header Host $host;
#          proxy_set_header X-Real-IP $remote_addr;
#          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#          proxy_pass  http://wormbase;
#	  client_max_body_size            0;
#  	  client_body_buffer_size         128k;
#	  proxy_send_timeout              120;
#	  proxy_buffer_size               4k;
#	  proxy_buffers                   4 32k;
#	  proxy_busy_buffers_size         64;
#	  proxy_temp_file_write_size      64k;
#	  proxy_connect_timeout           75;
#	  proxy_read_timeout              205;

          # proxy_pass http://plone/VirtualHostBase/http/www.example.com:80/Plone/VirtualHostRoot/;
  	# Back end server configuration
  #            root   html;
  #            index  index.html index.htm;

#          proxy_cache_bypass $cookie___ac;
#          proxy_cache thecache;
#          proxy_cache_key $scheme$proxy_host$request_uri;
        }


        location /static {
            root  /var/www/MyApp/root;
        }



        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
