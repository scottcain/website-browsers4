======================================================
Staging -> Production, 05/2011
======================================================

1. AceDB (steps/push_acedb.pl)

  Push acedb into production via a tarball, a single 
  unpacked acedb database directory, or all acedb/wormbase*
  directories.

  To run it under cron syncing ALL acedb/wormbase_* directories:
     ./push_acedb.pl --method all_directories

  To push out a single release using a tarball:
     ./push_acedb.pl --method by_package --release WSXXX

  To push out a single release by rsyncing the directory:
     ./push_acedb.pl --method by_directory --release WSXXX


2. Support Databases (steps/push_support_databases.pl)

  Push support databases into production via a tarball, a single
  database directory, or all current support database
  directories.

  To run it under cron keeping ALL database/WS* directories in sync:
     ./push_support_databases.pl --method all_directories

   # Start after the build deadline date
   0 3 12-31 * * /home/tharris/projects/wormbase/website-admin/update/production/steps/push_support_databases.pl

  To push out a single release using a tarball:
     ./push_support_databases.pl --method by_package --release WSXXX

  To push out a single release by rsyncing the directory:
     ./push_support_databases.pl --method by_directory --release WSXXX


3. MySQL databases (steps/push_mysql_databases.pl)

  Push mysql databases into production via a tarball or by syncing
  individual unpacked database directories.

  Preferred: push out a single release by rsyncing individual databases:
     ./push_mysql_databases.pl --method by_directory --release WSXXX

  To push out a single release using a tarball:
     ./push_mysql_databases.pl --method by_package --release WSXXX












4. Check out software, reconcile conflicts

   create software release

5. Push software

6. Update symlinks on FTP site

7. Update symlinks in production (go live)

8. Update release notes on wiki

9. Send announcemtnt

10. Post announcement on blog

11. restart services.



======================================================
Staging -> Production, 05/2010


DEPRECATED: Analyze logs:
-----------------------------------------------------
1. fe> concatenate_logs.sh WSXXX
2. brie6> analyze_logs.sh WSXXX 

Notes:
	* WSXXX is the current LIVE release
	* requires sudo privileges
	* make sure there is sufficient disk space on fe and brie6!

1. Sync support databases

  cron-rsync_support_dbs.sh
  
  Intended to be run as a cron job, eg:
  0 1 * * * /home/tharris/projects/wormbase/website-admin/update/production/cron-rsync_support_dbs.sh

2. Sync Mysql databases

   # Rsync mysql and acedb data dirs to local and (select) remote nodes
   # Start after the build deadline date
   0 3 12-31 * * /home/tharris/projects/wormbase/website-admin/update/production/cron-rsync_acedb.sh
   0 8 12-31 * * /home/tharris/projects/wormbase/website-admin/update/production/cron-rsync_mysql_dbs.sh

3. Sync AceDB

   # Rsync mysql and acedb data dirs to local and (select) remote nodes
   # Start after the build deadline date
   0 3 12-31 * * /home/tharris/projects/wormbase/website-admin/update/production/cron-rsync_acedb.sh


4. Update wormbase/website-classic/cgi-perl/lib/RSS/ObjectHistory.pm with release date
   so feeds can be generated.

5. update standard urls with release data - do manually

	/usr/local/wormbase/website-classic/html/standard_urls/standard_urls.xml

6. Checkout new updates in /usr/local/wormbase/website-classic-staging; reconcile conflicts

  cd /usr/local/wormbase/website-classic-staging
  cvs -n update > /usr/local/wormbase/logs/production_updates/WSXXX.log

7. Tag the software
   
   wb-dev> cvs_tag_relase.sh WSXXX // The new version being pushed out.

8. Create software release: 

   wb-dev> create_software_release.sh WSXXX // The new version being pushed out.

9. Push software

   brie3> push_software.sh

10. Update symlinks

   wb-dev> go_live.sh WSXXX

10. Send announcement: 

   web1> send_release_notification.pl

11. Update release notes on the wiki

12. Update list of new papers:

   brie3:wormbase/admin/update/development/build_new_paper_list.pl \
       /usr/local/acedb/elegans_WSXXX

13. Add the release announcement to the home page (via the blog)

   blog.wormbase.org/wp-admin/




0. Make sure the nodes are ready to go: 

   brie3> prepare_nodes.sh

3. brie3> restart_services.sh   






--

The files in this directory automate updates to the production cluster.

Todd Harris, 27 Aug 2007

IMPORTANT NOTE:
Some of the scripts in this directory execute scripts
on remote servers requiring super-user privileges.
The user running ths scripts must:

1) have sudo access on the remote box
2) have NOPASSWD set for the following cmds: killall,
   apachectl, and the xinetd and mysqld init scripts.
3) have already exchanged ssh keys with production nodes
4) have ~.ssh/config with short hostnames or appropriate 
   environment aliases set.

The relevant sudoers command is:
todd      localhost=NOPASSWD:/usr/local/apache/bin/apachectl,\
                             /etc/rc.d/init.d/mysqld,\
                             /etc/rc.d/init.d/xinted,\
                             /usr/bin/killall


update.sh NEW_WS_VERSION OLD_WS_VERSION

   This is a wrapper script around the push* and update scripts.
   I HAVEN'T TESTED THIS YET!


===========================
DESCRIPTION
===========================

push_software.sh [restart]

   Push new software located in the staging directory (/usr/local/wormbase-production)
   out to all nodes.  Pass an optional boolean true to make the servers restart
   httpd, too (useful in cases where new libraries are pushed out).

push_databases.sh WSVERSION
  
   Push new acedb and / or mysql databases onto nodes.  You must specify
   the WSVERSION.  This calls the following support scripts (described below) 
   in turn:

         push_databases-acedb.sh
         push_databases-mysql.sh
         push_support_databases.sh

restart_services.sh   

   Restart sgifaceserver, xinetd, mysqld, httpd (as appropriate) acrosss nodes
   following an update.

cvs_tag_relase.sh WSXXX

   Tag the software in the staging direcctory (/usr/local/wormbase-production).

create_software_release.sh WSXXX

   Create a software release on the FTP site.

send_release_notification.pl

   Run from one of the production nodes to send the release notification.


===========================
SUPPORT SCRIPTS
===========================

conf

   Server listings, typically used by dsh for batch execution of commands. Note
   that the servernames themselves need to be Host aliases in your ~/.ssh/config
   or shell environment and ssh keys should already be established.

pull_software.sh

   Pull software onto a production node from the staging repository.  Intended to
   be run from one of the production nodes.

purge_old_releases.sh WSXXX
    
   Remove releases eaerlier than WSXXX from servers listed in conf/all-nodes.conf

push_databases-acedb.sh WSXXX

   Push acedb database out to servers listed in conf/nodes-acedb.conf

push_databases-mysql.sh WSXXX

   Push databases out to servers listed in conf/nodes-mysql.conf

push_support_databases.sh WSXXX

   Pull in archival databases hosted on the FTP site into a directory
   structure organized by version, method (species: WSXXX/blast/c_brenneri)
   then sync this directory to the host driving searches.

   This needs to be run after the development site has been updated. It would
   be great if the version was dynamic or a symlink pointed to the current
   version.








 
