#!/bin/bash 

# Stage a new release of WormBase
# See complete documentation on the WormBase wiki.
#  http://wiki.wormbase.org/index.php/Software_Life_Cycle:_1._Updating_The_Development_Server

RELEASE=$1

if [ ! $RELEASE ]; then
   exit "Usage: $0 WSXXX"
fi

# 1. Mirror a new release from Sanger. (run under cron)
# ./steps/mirror_new_release.sh  // The next newest version will be discovered automatically.
#  OR
# END : mirror a new release from the Hinxton FTP site; in 0 days, 0 hours, 37 minutes and 25 seconds
./steps/mirror_new_release.sh  $RELEASE

# 2. Unpack AceDB
# END : unpack and customize acedb; in 0 days, 0 hours, 18 minutes and 20 seconds
./steps/unpack_acedb.pl $RELEASE

# 3. Mirror and unpack AceDB to Caltech
# END : push acedb to caltech; in 0 days, 1 hours, 4 minutes and 33 seconds
./steps/sync_acedb_to_caltech.pl $RELEASE

# 3. Create BLAST databases (requires ~ 2 hours for 16 species)
# END : build BLAST databases; in 0 days, 2 hours, 5 minutes and 6 seconds
./steps/create_blast_databases.pl $RELEASE

# 4. Create BLAT databases (requires ~ 5 hours for 16 species)
./steps/create_blat_databases.pl $RELEASE

# 5. Load Genomic GFF databases
END : load genomic gff databases; in 0 days, 22 hours, 58 minutes and 28 seconds
//steps/load_genomic_gff_databases.pl $RELEASE

# 6. Load the clustal database
./steps/unpack_clustal_databases.pl $RELEASE

#7. Compile Gene Resources
# END : compile gene page resources; in 0 days, 1 hours, 11 minutes and 52 seconds
./steps/compile_gene_resources.pl $RELEASE

# 8. Compile Ontology Resources
# This step takes ~ 5 hours or more
./steps/compile_ontology_resources.pl $RELEASE

# 9. Compile Orthology Resources
./steps/compile_orthology_resources.pl $RELEASE

# 10. Convert GFF2 into GFF3
./steps/convert_gff2_to_gff3.sh $RELEASE

# 11. Create commonly requested files
./steps/dump_annotations.pl $RELEASE

# 12. Create the xapian search database
#     See xapian/README for more information
mkdir /usr/local/wormbase/tmp/acedmp

#    1) Dump AceDB (this needs to be run manually)
# cd /usr/local/wormbase/acedb/bin
# ./tace ../wormbase
# acedb> @/usr/local/wormbase/website-admin/update/staging/xapian/dump_ace_for_search.script

#    2) Run Indexer
#  ./xapian/aceindex settings.conf $RELEASE

# 13. Check out new software to the staging server.

# 14. Rsync staging FTP site to the production FTP site.
./steps/rsync_staging_ftp_site_to_production.pl $RELEASE

# 15. Push a newly staged version to development and/or production servers.
#    If ANYTHING is wrong with the staged release,
#    this step will need to be repeated.
./steps/push_staged_release_to_nodes.pl --release $RELEASE --target development

# 16. Go live with the newly staged version on the staging serve
#    adjusts symlinks on this (staging) server
#    If ANYTHING is wrong with the staged release,
#    this step will need to be repeated.
./steps/adjust_symlinks.pl --release $RELEASE --target staging

# 17. Adjust symlinks on the FTP site (creating the current_dev symlinks)



14. Begin precaching content

    ./steps/precache_content.pl WSXXX


15. Send notification to staff that new release is available.



--- at production release ---

* Need to update links on FTP site (currently this is part of production/go_live- this needs to be
  updated and/or broken out so that it simply runs as a cron job.
* ./push_acedb.pl
* ./push_mysql_databases.pl
* ./push_support_databases.pl
* ./go_live.pl