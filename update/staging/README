#!/bin/bash 

# Stage a new release of WormBase
# See complete documentation on the WormBase wiki.
#  http://wiki.wormbase.org/index.php/Software_Life_Cycle:_1._Updating_The_Development_Server

RELEASE=$1

if [ ! $RELEASE ]; then
   exit "Usage: $0 WSXXX"
fi

# Clear old releases:
./steps/purge_old_releases.pl --release $RELEASE

# 0.5. Remove the old acedmp directory
rm -rf /usr/local/wormbase/tmp/staging/acedmp

# 1. Mirror a new release from Sanger. (run under cron)
# ./steps/mirror_new_release.sh  // The next newest version will be discovered automatically.
#  OR
# END : mirror a new release from the Hinxton FTP site; in 0 days, 0 hours, 37 minutes and 25 seconds
./steps/mirror_new_release.sh  --release $RELEASE

# 2. Unpack AceDB
# END : unpack and customize acedb; in 0 days, 0 hours, 18 minutes and 20 seconds
./steps/unpack_acedb.pl --release $RELEASE

# 3. Mirror and unpack AceDB to Caltech
# END : push acedb to caltech; in 0 days, 1 hours, 4 minutes and 33 seconds
./steps/rsync_acedb_to_caltech.pl --release $RELEASE --method by_directory

# 3. Create BLAST databases (requires ~ 5 minutes for 16 species)
./steps/create_blast_databases.pl --release $RELEASE

# 5. Load Genomic GFF databases
END : load genomic gff databases; in 0 days, 22 hours, 58 minutes and 28 seconds
./steps/load_genomic_gff_databases.pl --release $RELEASE

# 6. Load the clustal database
./steps/unpack_clustal_databases.pl --release $RELEASE

# 8. Compile Ontology Resources
./steps/compile_ontology_resources.pl --release $RELEASE

# 9. Compile Orthology Resources
# END : compile orthology resources; in 0 days, 2 hours, 35 minutes and 12 seconds
./steps/compile_orthology_resources.pl      --release $RELEASE

#  NOT REQUIRED FOR NEW SITE?
# 10. Compile interaction data.
#./steps/compile_interaction_resources.pl --release $RELEASE

# 10. Create Widgets.ace file from wormbase_user database
./steps/create_widget_acedmp.pl --release $RELEASE

# 11. Create the xapian search database
# See xapian/README for information on doing this outside of the pipeline
./steps/build_xapian_db.pl --release $RELEASE


# 13. Check out new software to the staging server.

# 15. Push a newly staged version to development server(s).
#    If ANYTHING is wrong with the staged release,
#    this step will need to be repeated.

# First to the other staging nodes
./steps/push_staging_release_to_nodes.pl --release $RELEASE --target staging



# 16. Go live with the newly staged version on the staging server by adjusting symlinks!
#    * adjusts acedb and mysql symlinks on this (staging) server
#
#      If ANYTHING is wrong with the staged release,
#      this step will need to be repeated.
# Staging
./steps/adjust_symlinks.pl --release $RELEASE --target staging

./steps/push_staged_release_to_nodes.pl --release $RELEASE --target development

# Development server(s)
./steps/adjust_symlinks.pl --release $RELEASE --target development

# And update symlinks on the ftp site:
./steps/update_ftp_site_symlinks.pl --release $RELEASE --status development

# 12. Create commonly requested files
# END : dump_annotations; in 0 days, 2 hours, 19 minutes and 59 seconds
./steps/dump_annotations.pl --release $RELEASE

# 10. Convert GFF2 into GFF3
# END : convert GFF2 annotations to GFF3; in 0 days, 2 hours, 45 minutes and 5 seconds
./steps/convert_gff2_to_gff3.sh --release $RELEASE



# Tag software:
# No longer using
#shell> cd /path/to/your/repository
#shell> git branch --track WSXXX origin/master
#shell> git checkout WSXXX
#shell> git push origin WSXXX


# 14. Begin precaching content
./steps/precache_content.pl --release WSXXX


15. Send notification to staff that new release is available.


